module Maze where

import qualified SDL

renderMaze :: SDL.Renderer -> SDL.Texture -> IO ()
renderMaze renderer texture = SDL.copy renderer texture mask placement
    where mask = Just $ SDL.Rectangle (SDL.P (SDL.V2 0 0)) (SDL.V2 width height)
          placement = Just $ SDL.Rectangle (SDL.P (SDL.V2 0 0)) (SDL.V2 (width * constant) (height * constant))
          constant = 3
          width = 224
          height = 248

data Tile = Void | Passage | Coin | Power | Transport
    deriving (Eq, Show)

mazeMatrix :: [[Tile]]
mazeMatrix = [[Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Void, Void, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin], [Coin, Void, Void, Void, Void, Coin, Void, Void, Void, Void, Void, Coin, Void, Void, Coin, Void, Void, Void, Void, Void, Coin, Void, Void, Void, Void, Coin], [Power, Void, Void, Void, Void, Coin, Void, Void, Void, Void, Void, Coin, Void, Void, Coin, Void, Void, Void, Void, Void, Coin, Void, Void, Void, Void, Power], [Coin, Void, Void, Void, Void, Coin, Void, Void, Void, Void, Void, Coin, Void, Void, Coin, Void, Void, Void, Void, Void, Coin, Void, Void, Void, Void, Coin], [Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin], [Coin, Void, Void, Void, Void, Coin, Void, Void, Coin, Void, Void, Void, Void, Void, Void, Void, Void, Coin, Void, Void, Coin, Void, Void, Void, Void, Coin], [Coin, Void, Void, Void, Void, Coin, Void, Void, Coin, Void, Void, Void, Void, Void, Void, Void, Void, Coin, Void, Void, Coin, Void, Void, Void, Void, Coin], [Coin, Coin, Coin, Coin, Coin, Coin, Void, Void, Coin, Coin, Coin, Coin, Void, Void, Coin, Coin, Coin, Coin, Void, Void, Coin, Coin, Coin, Coin, Coin, Coin], [Void, Void, Void, Void, Void, Coin, Void, Void, Void, Void, Void, Passage, Void, Void, Passage, Void, Void, Void, Void, Void, Coin, Void, Void, Void, Void, Void], [Void, Void, Void, Void, Void, Coin, Void, Void, Void, Void, Void, Passage, Void, Void, Passage, Void, Void, Void, Void, Void, Coin, Void, Void, Void, Void, Void], [Void, Void, Void, Void, Void, Coin, Void, Void, Passage, Passage, Passage, Passage, Passage, Passage, Passage, Passage, Passage, Passage, Void, Void, Coin, Void, Void, Void, Void, Void], [Void, Void, Void, Void, Void, Coin, Void, Void, Passage, Void, Void, Void, Void, Void, Void, Void, Void, Passage, Void, Void, Coin, Void, Void, Void, Void, Void], [Void, Void, Void, Void, Void, Coin, Void, Void, Passage, Void, Void, Void, Void, Void, Void, Void, Void, Passage, Void, Void, Coin, Void, Void, Void, Void, Void], [Transport, Passage, Passage, Passage, Passage, Coin, Passage, Passage, Passage, Void, Void, Void, Void, Void, Void, Void, Void, Passage, Passage, Passage, Coin, Passage, Passage, Passage, Passage, Transport], [Void, Void, Void, Void, Void, Coin, Void, Void, Passage, Void, Void, Void, Void, Void, Void, Void, Void, Passage, Void, Void, Coin, Void, Void, Void, Void, Void], [Void, Void, Void, Void, Void, Coin, Void, Void, Passage, Void, Void, Void, Void, Void, Void, Void, Void, Passage, Void, Void, Coin, Void, Void, Void, Void, Void], [Void, Void, Void, Void, Void, Coin, Void, Void, Passage, Passage, Passage, Passage, Passage, Passage, Passage, Passage, Passage, Passage, Void, Void, Coin, Void, Void, Void, Void, Void], [Void, Void, Void, Void, Void, Coin, Void, Void, Passage, Void, Void, Void, Void, Void, Void, Void, Void, Passage, Void, Void, Coin, Void, Void, Void, Void, Void], [Void, Void, Void, Void, Void, Coin, Void, Void, Passage, Void, Void, Void, Void, Void, Void, Void, Void, Passage, Void, Void, Coin, Void, Void, Void, Void, Void], [Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Void, Void, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin], [Coin, Void, Void, Void, Void, Coin, Void, Void, Void, Void, Void, Coin, Void, Void, Coin, Void, Void, Void, Void, Void, Coin, Void, Void, Void, Void, Coin], [Coin, Void, Void, Void, Void, Coin, Void, Void, Void, Void, Void, Coin, Void, Void, Coin, Void, Void, Void, Void, Void, Coin, Void, Void, Void, Void, Coin], [Power, Coin, Coin, Void, Void, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Passage, Passage, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Void, Void, Coin, Coin, Power], [Void, Void, Coin, Void, Void, Coin, Void, Void, Coin, Void, Void, Void, Void, Void, Void, Void, Void, Coin, Void, Void, Coin, Void, Void, Coin, Void, Void], [Void, Void, Coin, Void, Void, Coin, Void, Void, Coin, Void, Void, Void, Void, Void, Void, Void, Void, Coin, Void, Void, Coin, Void, Void, Coin, Void, Void], [Coin, Coin, Coin, Coin, Coin, Coin, Void, Void, Coin, Coin, Coin, Coin, Void, Void, Coin, Coin, Coin, Coin, Void, Void, Coin, Coin, Coin, Coin, Coin, Coin], [Coin, Void, Void, Void, Void, Void, Void, Void, Void, Void, Void, Coin, Void, Void, Coin, Void, Void, Void, Void, Void, Void, Void, Void, Void, Void, Coin], [Coin, Void, Void, Void, Void, Void, Void, Void, Void, Void, Void, Coin, Void, Void, Coin, Void, Void, Void, Void, Void, Void, Void, Void, Void, Void, Coin], [Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin, Coin]]

isValidPosition :: Int -> Int -> Bool
isValidPosition i j = not (i < 0 || i >= 29 || j < 0 || j >= 26) && (mazeMatrix !! i !! j /= Void)

transport a = case a of
    0  -> 25
    25 -> 0
    _  -> a
